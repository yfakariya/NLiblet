<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
#region -- License Terms --
//
// NLiblet
//
// Copyright (C) 2011 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --
<#
var toolAssembly = Assembly.GetEntryAssembly() ?? this.Session.GetType().Assembly;
var toolName = toolAssembly.GetName().Name;
var toolVersion = toolAssembly.GetName().Version.ToString();
var aivAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyInformationalVersionAttribute ) ) as AssemblyInformationalVersionAttribute;
if( aivAttr != null )
{
	toolVersion = aivAttr.InformationalVersion;
}
else
{
	var afvAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyFileVersionAttribute ) ) as AssemblyFileVersionAttribute;
	if( afvAttr != null )
	{
		toolVersion = afvAttr.Version;
	}
}
var templateFile = Path.GetFileName( this.Host.TemplateFile );
#>

// This code is generated from T4Template <#= templateFile #>.
// Do not modify this source code directly.

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;

using NLiblet.Properties;

namespace NLiblet.Reflection
{
#pragma warning disable 1572, 1587, 1591

	partial class GeneratedCodeHelper
	{
		[EditorBrowsable( EditorBrowsableState.Never )]
		[SuppressMessage( "Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "integer", Justification = "It is note intented to be used from user code, and integer does not imply VB type name." )]
		public static readonly MethodInfo UnboxPrimitiveIntegerMethod =
			typeof( GeneratedCodeHelper ).GetMethod( "UnboxPrimitiveInteger" );

		[CLSCompliant( false )]
		[EditorBrowsable( EditorBrowsableState.Never )]
		[SuppressMessage( "Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "integer", Justification = "It is note intented to be used from user code, and integer does not imply VB type name." )]
		public static ulong UnboxPrimitiveInteger( object value )
		{
			unchecked
			{
<#
foreach( Type primitive in new [] { typeof( ulong ), typeof( long ), typeof( uint ), typeof( int ), typeof( ushort ), typeof( short ), typeof( byte ), typeof( sbyte ) } )
{
#>
				if ( value is <#= primitive.FullName #> )
				{
					return ( ulong )( <#= primitive.FullName #> )value;
				}
<#
}
#>
				throw new NotSupportedException( String.Format( CultureInfo.CurrentCulture, Resources.CastCode_UnknownPrimitive, value == null ? typeof( object ) : value.GetType() ) );
			}
		}
		
		[EditorBrowsable( EditorBrowsableState.Never )]
		public static readonly MethodInfo UnboxPrimitiveRealMethod =
			typeof( GeneratedCodeHelper ).GetMethod( "UnboxPrimitiveReal" );

		[EditorBrowsable( EditorBrowsableState.Never )]
		public static double UnboxPrimitiveReal( object value )
		{
			unchecked
			{
<#
foreach( Type primitive in new [] { typeof( double ), typeof( float ) } )
{
#>
				if ( value is <#= primitive.FullName #> )
				{
					return ( ulong )( <#= primitive.FullName #> )value;
				}
<#
}
#>
				throw new NotSupportedException( String.Format( CultureInfo.CurrentCulture, Resources.CastCode_UnknownPrimitive, value == null ? typeof( object ) : value.GetType() ) );
			}
		}
	}

#pragma warning restore 1572, 1587, 1591
}