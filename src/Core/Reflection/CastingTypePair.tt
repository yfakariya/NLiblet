<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ include file="../../../templates/StructCS.ttinclude" #>
#region -- License Terms --
//
// NLiblet
//
// Copyright (C) 2011 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --
<#
var toolAssembly = Assembly.GetEntryAssembly() ?? this.Session.GetType().Assembly;
var toolName = toolAssembly.GetName().Name;
var toolVersion = toolAssembly.GetName().Version.ToString();
var aivAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyInformationalVersionAttribute ) ) as AssemblyInformationalVersionAttribute;
if( aivAttr != null )
{
	toolVersion = aivAttr.InformationalVersion;
}
else
{
	var afvAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyFileVersionAttribute ) ) as AssemblyFileVersionAttribute;
	if( afvAttr != null )
	{
		toolVersion = afvAttr.Version;
	}
}
var templateFile = Path.GetFileName( this.Host.TemplateFile );
#>

// This code is generated from T4Template <#= templateFile #>.
// Do not modify this source code directly.

using System;
using System.Globalization;

namespace NLiblet
{
<#
this.PushIndent( "\t" );

GetStructCodeGenerator(
	typeName: "CastingTypePair",
	fields: new []
	{
		new FieldDeclaration( "Source", "RuntimeTypeHandle", true ) 
		{ 
			SummaryComment = "Get <see cref=\"RuntimeTypeHandle\" /> of cast source.", 
			ValueComment = "<see cref=\"RuntimeTypeHandle\" /> of cast source."
		},
		new FieldDeclaration( "Target", "RuntimeTypeHandle", true ) 
		{ 
			SummaryComment = "Get <see cref=\"RuntimeTypeHandle\" /> of cast target.", 
			ValueComment = "<see cref=\"RuntimeTypeHandle\" /> of cast target."
		}
	},
	toStringGenerator : ( fields ) =>
		String.Format( 
			CultureInfo.InvariantCulture, 
			@"return String.Format( " +
			@"CultureInfo.InvariantCulture, " +
			@"""'{{0}}'({{1:x}})->'{{2}}'({{3:x}})"", " + 
			@"Type.GetTypeFromHandle( {0} ).AssemblyQualifiedName, "+
			@"{0}.Value, " +
			@"Type.GetTypeFromHandle( {1} ).AssemblyQualifiedName, "+
			@"{1}.Value" +
			@" );",
			fields.Select( item => item.Name as object ).ToArray()
		),
	typeOptions: ValueTypeOptions.Serializable
)();

this.PopIndent();
#>
}