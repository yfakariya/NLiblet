<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
#region -- License Terms --
//
// NLiblet
//
// Copyright (C) 2011 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --
<#
var toolAssembly = Assembly.GetEntryAssembly() ?? this.Session.GetType().Assembly;
var toolName = toolAssembly.GetName().Name;
var toolVersion = toolAssembly.GetName().Version.ToString();
var aivAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyInformationalVersionAttribute ) ) as AssemblyInformationalVersionAttribute;
if( aivAttr != null )
{
	toolVersion = aivAttr.InformationalVersion;
}
else
{
	var afvAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyFileVersionAttribute ) ) as AssemblyFileVersionAttribute;
	if( afvAttr != null )
	{
		toolVersion = afvAttr.Version;
	}
}
var templateFile = Path.GetFileName( this.Host.TemplateFile );
#>

// This code is generated from T4Template <#= templateFile #>.
// Do not modify this source code directly.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace NLiblet.Text.Formatters
{
	partial class ItemFormatter
	{
		private static readonly Dictionary<RuntimeTypeHandle, ItemFormatter> _itemFormatters =
			new Dictionary<RuntimeTypeHandle, ItemFormatter>()
			{
				{ typeof( Object ).TypeHandle, PolymorphicObjectFormatter.Instance },
				{ typeof( ValueType ).TypeHandle, PolymorphicObjectFormatter.Instance },
				{ typeof( bool ).TypeHandle, BooleanFormatter.Instance },
				{ typeof( DateTime ).TypeHandle, DateTimeFormatter.Instance },
				{ typeof( DateTimeOffset ).TypeHandle, DateTimeOffsetFormatter.Instance },
				{ typeof( TimeSpan ).TypeHandle, TimeSpanFormatter.Instance },
				{ typeof( String ).TypeHandle, StringFormatter.Instance },
				{ typeof( StringBuilder ).TypeHandle, StringBuilderFormatter.Instance },
				{ typeof( SerializationInfo ).TypeHandle, SerializationInfoFormatter.Instance },
				{ typeof( byte[] ).TypeHandle, BytesFormatter.Instance },
				{ typeof( char[] ).TypeHandle, StringFormatter.Instance },
<#
// JSON numeric compatibles.
foreach( var numericType in 
	new [] 
	{ 
		typeof( byte ),
		typeof( sbyte ),
		typeof( short ),
		typeof( ushort ),
		typeof( int ),
		typeof( uint ),
		typeof( long ),
		typeof( ulong ),
		typeof( float  ),
		typeof( double ),
		typeof( IntPtr ),
		typeof( UIntPtr )
	}
)
{
#>
				{ typeof( <#= numericType.Name #> ).TypeHandle, <#= typeof( IFormattable ).IsAssignableFrom( numericType ) ? "Formattable" : String.Empty #>NumericsFormatter<#= "<" + numericType.Name + ">" #>.Instance },
<#
}
#>
			};
	}
}