<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
#region -- License Terms --
//
// NLiblet
//
// Copyright (C) 2011 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --
<#
var toolAssembly = Assembly.GetEntryAssembly() ?? this.Session.GetType().Assembly;
var toolName = toolAssembly.GetName().Name;
var toolVersion = toolAssembly.GetName().Version.ToString();
var aivAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyInformationalVersionAttribute ) ) as AssemblyInformationalVersionAttribute;
if( aivAttr != null )
{
	toolVersion = aivAttr.InformationalVersion;
}
else
{
	var afvAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyFileVersionAttribute ) ) as AssemblyFileVersionAttribute;
	if( afvAttr != null )
	{
		toolVersion = afvAttr.Version;
	}
}
var templateFile = Path.GetFileName( this.Host.TemplateFile );
var blockTxt = Path.Combine( Path.GetDirectoryName( this.Host.TemplateFile ), "Blocks.txt" );
#>

// This code is generated from T4Template <#= templateFile #>.
// Do not modify this source code directly.

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics.Contracts;
using System.Globalization;

namespace NLiblet.Text
{
	partial class UnicodeUtility
	{
		public static string GetUnicodeBlockName( int utf32 )
		{
			Contract.Requires<ArgumentOutOfRangeException>( 0 <= utf32 && utf32 <= 0x10FFFF );
			
<#
Regex regex = new Regex( @"^(?<from>[0-9a-fA-F]+)\.\.(?<to>[0-9a-fA-F]+)\s*;\s*(?<name>.+)$", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture | RegexOptions.Singleline );
foreach( var tuple in
	File.ReadLines( blockTxt, Encoding.UTF8 )
	.Where( line => line.Length > 0 && line[ 0 ] != '#' )
	.Select( line => regex.Match( line ) )
	.Where( match => match.Success )
	.Select( match => new { From = Int32.Parse( match.Groups[ "from" ].Value, NumberStyles.HexNumber ), To = Int32.Parse( match.Groups[ "to" ].Value, NumberStyles.HexNumber ), Name = match.Groups[ "name" ].Value } )
)
{
#>
			if ( 0x<#= tuple.From.ToString( "X4" ) #> <= utf32 && utf32 <= 0x<#= tuple.To.ToString( "X4" ) #> )
			{
				return "<#= tuple.Name #>";
			}
<#
	}
#>
			// dummy
			return null;
		}
	}
}