<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
#region -- License Terms --
//
// NLiblet
//
// Copyright (C) 2011 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --
<#
var toolAssembly = Assembly.GetEntryAssembly() ?? this.Session.GetType().Assembly;
var toolName = toolAssembly.GetName().Name;
var toolVersion = toolAssembly.GetName().Version.ToString();
var aivAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyInformationalVersionAttribute ) ) as AssemblyInformationalVersionAttribute;
if( aivAttr != null )
{
	toolVersion = aivAttr.InformationalVersion;
}
else
{
	var afvAttr = Attribute.GetCustomAttribute( toolAssembly, typeof( AssemblyFileVersionAttribute ) ) as AssemblyFileVersionAttribute;
	if( afvAttr != null )
	{
		toolVersion = afvAttr.Version;
	}
}
var templateFile = Path.GetFileName( this.Host.TemplateFile );
var blockTxt = Path.Combine( Path.GetDirectoryName( this.Host.TemplateFile ), "Blocks.txt" );

// Specified vars
var types =
		new []
		{
			"XAttribute",
			"XElement",
			"XDocument",
			"XDeclaration",
			"XDocumentType",
			"XProcessingInstruction",
			"XComment",
			"XText"
		};
var notXNodes = new HashSet<string>() { "XAttribute", "XDeclaration" };
#>

// This code is generated from T4Template <#= templateFile #>.
// Do not modify this source code directly.

using System;
using System.Globalization;
using System.Xml;
using System.Xml.Linq;

namespace NLiblet.NUnitExtensions
{
	partial class XmlAssert
	{
<#
foreach( var type in types )
{
	var expectedDocumentComment = "Expected <see cref=\"" + type + "\"/> value.";
	var actualDocumentComment = "Actual <see cref=\"" + type + "\"/> value.";
	var exceptionDocumentComment = @"/// <exception cref=""NUnit.Framework.AssertionException\"">Verification failed.</exception>";
#>
		/// <summary>
		/// 	Verify two <see cref="<#= type #>"/>s are equal.
		/// </summary>
		/// <param name="expected"><#= expectedDocumentComment #></param>
		/// <param name="actual"><#= actualDocumentComment #></param>
		<#= exceptionDocumentComment #>
		public static void AreEqual( <#= type #> expected, <#= type #> actual )
		{
			AreEqual( expected, actual, default( Func<string> ) );
		}
		
		/// <summary>
		/// 	Verify two <see cref="<#= type #>"/>s are equal with specified error message.
		/// </summary>
		/// <param name="expected"><#= expectedDocumentComment #></param>
		/// <param name="actual"><#= actualDocumentComment #></param>
		/// <param name="message">Custom error message or its format string. This value can be null.</param>
		/// <param name="args">Format argument of custom error messgae.</param>
		<#= exceptionDocumentComment #>
		/// <exception cref="FormatException"><paramref name="message"/>, <paramref name="args"/> or both of them are invalid.</exception>
		public static void AreEqual( <#= type #> expected, <#= type #> actual, string message, params object[] args )
		{
			AreEqual( expected, actual, () => String.Format( CultureInfo.CurrentCulture, message, args ) );
		}

		/// <summary>
		/// 	Verify two <see cref="<#= type #>"/>s are equal with specified error message provider.
		/// </summary>
		/// <param name="expected"><#= expectedDocumentComment #></param>
		/// <param name="actual"><#= actualDocumentComment #></param>
		/// <param name="messageProvider">Delegate which provides custom assertion error message. This value can be null.</param>
		<#= exceptionDocumentComment #>
		public static void AreEqual( <#= type #> expected, <#= type #> actual, Func<string> messageProvider )
		{
			if ( AssertWhetherNull( expected, actual, messageProvider, target => target.ToString( <#= notXNodes.Contains( type ) ? String.Empty : "SaveOptions.DisableFormatting" #> ) ) )
			{
				return;
			}

			AreEqualCore( expected, actual, messageProvider );
		}
<#
}
#>
	}
}