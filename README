NLiblet readme

What is it?

  These are casual small libraries.

  * CoreUtilities
    Minimal utility libraries include:
      - Powerful custom IFormatter (FormatProviders).
        - Enable charactor formatting including code point, category, block name, and a number of escaping.
        - Enable JSON like collection formatting.
      - Utility for unicode specification including block name retrieval, casual printable determining.
      - Converter for byte array as hexadecimal charactors (inspired by Apache Commons Codec)
      - Typed disposable WeakReference (WeakReference<T>)
      - HashCodeBuilder. Lightweight, null safe builder (inspired by Apache Commons Lang)
      - Extension methods for String and StringBuilder
      - Singleton holder for immutable collections (Empty)

  * NUnitExtensions
    A few extensions for NUnit:
      - Assertion for LINQ to XML (XmlAssert)
      - More readable display for string difference

  * ServiceLocators
    Very simple Service Locator.
      - Explicit registration model.
        It assumes that dependency injection is used in automatic test only.
        It is recommended that specifying clear specification for implementation type on production code
        for readability and maintenancibility.
        (Add-in/Plug-in should be explicitly designed and tested.)
      - Avoid TargetInvocationException from differed constructor invocation.

How to build

  For .NET Framework
     1.  Install recent Windows SDK (at least, .NET Framework 4 Full Profile and MSBuild is needed.)
         Or install Visual Studio or Visual Studio Express.
     1.1.   If you want to build unit test assemblies, install recent NUnit (2.5.2 or later).
            (Put nunit.core.dll and nunit.framework.dll in /lib directory.)
     2.  Install Code Contract Rewriter.
         For more information see http://msdn.microsoft.com/en-us/devlabs/dd491992
     3.  Run:
           msbuild NLiblet.sln
         Or open NLiblet.sln in your IDE and run build command in it.
     3.1.   You must specify NUnit assemblies to build unit test assemblies.

  For Mono
     T.B.A. (xbuild and Mono Develop might help you...)

How to use

  AS Library
     1. Build them.
     2. Use them as external library assemblies.

  AS Snippet
     1. Copy source code file (and test file optionally) to your project source tree as you like.

See also

  MSBuild reference     : http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx
  (You can see translated version by changing "en-us" to some locale as you like (e.g. "ja-jp".)
  Mono xbuild reference : http://www.mono-project.com/Microsoft.Build